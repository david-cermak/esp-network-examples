diff -ruN contrib-2.1.0/ports/Common.allports.mk contrib-2.1.0-work/ports/Common.allports.mk
--- contrib-2.1.0/ports/Common.allports.mk	2018-07-12 21:24:16.000000000 +0200
+++ contrib-2.1.0-work/ports/Common.allports.mk	2022-05-02 10:03:27.052450780 +0200
@@ -43,7 +43,7 @@
 #	-Wconversion -Wsign-compare -Wmissing-include-dirs
 
 ifeq (,$(findstring clang,$(CC)))
-CFLAGS+= -Wlogical-op -Wc90-c99-compat -Wtrampolines
+CFLAGS+= -Wlogical-op -Wtrampolines
 # if GCC is newer than 4.8/4.9 you may use:
 #CFLAGS:=$(CFLAGS) -fsanitize=address -fstack-protector -fstack-check -fsanitize=undefined -fno-sanitize=alignment
 else
diff -ruN contrib-2.1.0/ports/unix/port/include/arch/sys_arch.h contrib-2.1.0-work/ports/unix/port/include/arch/sys_arch.h
--- contrib-2.1.0/ports/unix/port/include/arch/sys_arch.h	2022-05-02 10:34:36.772855771 +0200
+++ contrib-2.1.0-work/ports/unix/port/include/arch/sys_arch.h	2022-05-02 10:02:12.083575234 +0200
@@ -56,6 +56,16 @@
 #define sys_mbox_set_invalid(mbox)     sys_sem_set_invalid(mbox)
 #define sys_mbox_set_invalid_val(mbox) sys_sem_set_invalid_val(mbox)
 
+#if LWIP_NETCONN_SEM_PER_THREAD
+sys_sem_t* sys_arch_netconn_sem_get(void);
+void sys_arch_netconn_sem_alloc(void);
+void sys_arch_netconn_sem_free(void);
+#define LWIP_NETCONN_THREAD_SEM_GET()   sys_arch_netconn_sem_get()
+#define LWIP_NETCONN_THREAD_SEM_ALLOC() sys_arch_netconn_sem_alloc()
+#define LWIP_NETCONN_THREAD_SEM_FREE()  sys_arch_netconn_sem_free()
+#endif /* #if LWIP_NETCONN_SEM_PER_THREAD */
+
+
 struct sys_thread;
 typedef struct sys_thread * sys_thread_t;
 
diff -ruN contrib-2.1.0/ports/unix/port/sys_arch.c contrib-2.1.0-work/ports/unix/port/sys_arch.c
--- contrib-2.1.0/ports/unix/port/sys_arch.c	2022-05-02 10:34:36.772855771 +0200
+++ contrib-2.1.0-work/ports/unix/port/sys_arch.c	2022-05-02 10:21:10.359795373 +0200
@@ -66,6 +66,11 @@
 #include "lwip/stats.h"
 #include "lwip/tcpip.h"
 
+#if LWIP_NETCONN_SEM_PER_THREAD
+/* pthread key to *our* thread local storage entry */
+static pthread_key_t sys_thread_sem_key;
+#endif
+
 static void
 get_monotonic_time(struct timespec *ts)
 {
@@ -630,6 +635,68 @@
 
 #endif /* !NO_SYS */
 
+#if LWIP_NETCONN_SEM_PER_THREAD
+/*-----------------------------------------------------------------------------------*/
+/* Semaphore per thread located TLS */
+
+static void
+sys_thread_sem_free(void* data)
+{
+  sys_sem_t *sem = (sys_sem_t*)(data);
+
+  if (sem) {
+    sys_sem_free(sem);
+    free(sem);
+  }
+}
+
+static sys_sem_t*
+sys_thread_sem_alloc(void)
+{
+  sys_sem_t *sem;
+  err_t err;
+  int ret;
+
+  sem = (sys_sem_t*)malloc(sizeof(sys_sem_t*));
+  LWIP_ASSERT("failed to allocate memory for TLS semaphore", sem != NULL);
+  err = sys_sem_new(sem, 0);
+  LWIP_ASSERT("failed to initialise TLS semaphore", err == ERR_OK);
+  ret = pthread_setspecific(sys_thread_sem_key, sem);
+  LWIP_ASSERT("failed to initialise TLS semaphore storage", ret == 0);
+  return sem;
+}
+
+sys_sem_t*
+sys_arch_netconn_sem_get(void)
+{
+  sys_sem_t* sem = (sys_sem_t*)pthread_getspecific(sys_thread_sem_key);
+  if (!sem) {
+    sem = sys_thread_sem_alloc();
+  }
+  LWIP_DEBUGF(SYS_DEBUG, ("sys_thread_sem_get s=%p\n", (void*)sem));
+  return sem;
+}
+
+void
+sys_arch_netconn_sem_alloc(void)
+{
+  sys_sem_t* sem = sys_thread_sem_alloc();
+  LWIP_DEBUGF(SYS_DEBUG, ("sys_thread_sem created s=%p\n", (void*)sem));
+}
+
+void
+sys_arch_netconn_sem_free(void)
+{
+  int ret;
+
+  sys_sem_t *sem = (sys_sem_t *)pthread_getspecific(sys_thread_sem_key);
+  sys_thread_sem_free(sem);
+  ret = pthread_setspecific(sys_thread_sem_key, NULL);
+  LWIP_ASSERT("failed to de-init TLS semaphore storage", ret == 0);
+}
+#endif /* LWIP_NETCONN_SEM_PER_THREAD */
+
+
 /*-----------------------------------------------------------------------------------*/
 /* Time */
 u32_t
@@ -656,6 +723,9 @@
 void
 sys_init(void)
 {
+#if LWIP_NETCONN_SEM_PER_THREAD
+  pthread_key_create(&sys_thread_sem_key, sys_thread_sem_free);
+#endif
 }
 
 /*-----------------------------------------------------------------------------------*/
